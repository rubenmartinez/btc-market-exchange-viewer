// Generated by delombok at Sat Dec 15 18:24:59 CET 2018
package net.rubenmartinez.stpc.app.strategy.implementations.contrarian;

import java.math.BigDecimal;
import java.util.Optional;

public class ContrarianStrategyStats {
	private int tradesProcessed;
	private int buyTradesPlaced;
	private int sellTradesPlaced;
	private BigDecimal tradesBalance;
	private Optional<BigDecimal> lastBuyPrice;
	private Optional<BigDecimal> lastSellPrice;
	private int currentConsecutiveUpticks;
	private int currentConsecutiveDownticks;
	private int currentConsecutiveZeroticks;

	public ContrarianStrategyStats() {
		reset();
	}

	public void reset() {
		tradesProcessed = 0;
		buyTradesPlaced = 0;
		sellTradesPlaced = 0;
		tradesBalance = BigDecimal.ZERO;
		lastBuyPrice = Optional.empty();
		lastSellPrice = Optional.empty();
		currentConsecutiveDownticks = 0;
		currentConsecutiveUpticks = 0;
		currentConsecutiveZeroticks = 0;
	}
	

	public void incTradesProcessed() {
		tradesProcessed++;
	}

	public void incBuyTradesPlaced() {
		buyTradesPlaced++;
	}

	public void incSellTradesPlaced() {
		sellTradesPlaced++;
	}

	public void incCurrentConsecutiveDownticks() {
		currentConsecutiveDownticks++;
	}

	public void incCurrentConsecutiveUpticks() {
		currentConsecutiveUpticks++;
	}

	public void incCurrentConsecutiveZeroticks() {
		currentConsecutiveZeroticks++;
	}

	public void addTradesBalance(BigDecimal balance) {
		tradesBalance = tradesBalance.add(balance);
	}

	public int getTradesProcessed() {
		return this.tradesProcessed;
	}

	public int getBuyTradesPlaced() {
		return this.buyTradesPlaced;
	}

	public int getSellTradesPlaced() {
		return this.sellTradesPlaced;
	}

	public BigDecimal getTradesBalance() {
		return this.tradesBalance;
	}

	public Optional<BigDecimal> getLastBuyPrice() {
		return this.lastBuyPrice;
	}

	public Optional<BigDecimal> getLastSellPrice() {
		return this.lastSellPrice;
	}

	public int getCurrentConsecutiveUpticks() {
		return this.currentConsecutiveUpticks;
	}

	public int getCurrentConsecutiveDownticks() {
		return this.currentConsecutiveDownticks;
	}

	public int getCurrentConsecutiveZeroticks() {
		return this.currentConsecutiveZeroticks;
	}

	public void setTradesProcessed(final int tradesProcessed) {
		this.tradesProcessed = tradesProcessed;
	}

	public void setBuyTradesPlaced(final int buyTradesPlaced) {
		this.buyTradesPlaced = buyTradesPlaced;
	}

	public void setSellTradesPlaced(final int sellTradesPlaced) {
		this.sellTradesPlaced = sellTradesPlaced;
	}

	public void setTradesBalance(final BigDecimal tradesBalance) {
		this.tradesBalance = tradesBalance;
	}

	public void setLastBuyPrice(final Optional<BigDecimal> lastBuyPrice) {
		this.lastBuyPrice = lastBuyPrice;
	}

	public void setLastSellPrice(final Optional<BigDecimal> lastSellPrice) {
		this.lastSellPrice = lastSellPrice;
	}

	public void setCurrentConsecutiveUpticks(final int currentConsecutiveUpticks) {
		this.currentConsecutiveUpticks = currentConsecutiveUpticks;
	}

	public void setCurrentConsecutiveDownticks(final int currentConsecutiveDownticks) {
		this.currentConsecutiveDownticks = currentConsecutiveDownticks;
	}

	public void setCurrentConsecutiveZeroticks(final int currentConsecutiveZeroticks) {
		this.currentConsecutiveZeroticks = currentConsecutiveZeroticks;
	}

	@Override
	public String toString() {
		return "ContrarianStrategyStats(tradesProcessed=" + this.getTradesProcessed() + ", buyTradesPlaced=" + this.getBuyTradesPlaced() + ", sellTradesPlaced=" + this.getSellTradesPlaced() + ", tradesBalance=" + this.getTradesBalance() + ", lastBuyPrice=" + this.getLastBuyPrice() + ", lastSellPrice=" + this.getLastSellPrice() + ", currentConsecutiveUpticks=" + this.getCurrentConsecutiveUpticks() + ", currentConsecutiveDownticks=" + this.getCurrentConsecutiveDownticks() + ", currentConsecutiveZeroticks=" + this.getCurrentConsecutiveZeroticks() + ")";
	}
}
