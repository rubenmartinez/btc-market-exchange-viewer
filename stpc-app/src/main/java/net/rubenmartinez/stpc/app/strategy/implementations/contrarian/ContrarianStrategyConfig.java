// Generated by delombok at Sat Dec 15 18:24:59 CET 2018
package net.rubenmartinez.stpc.app.strategy.implementations.contrarian;

import java.math.BigDecimal;

public class ContrarianStrategyConfig {
	private static final int DEFAULT_CONSECUTIVE_UPTICKS_TO_SELL = 3;
	private static final int DEFAULT_CONSECUTIVE_DOWNTICKS_TO_BUY = 2;
	private static final BigDecimal DEFAULT_TRADE_AMOUNT = BigDecimal.ONE;
	private static final boolean DEFAULT_RESET_TICKS_AFTER_TRADE = true;
	private static final boolean DEFAULT_REEVALUATE_PAST_ON_RECONFIGURATION = true;
	private static final int DEFAULT_PAST_TRADES_TO_EVALUATE = 100;
	private int consecutiveUpticksToSell;
	private int consecutiveDownticksToBuy;
	private BigDecimal tradeAmountInBaseCurrency;
	private boolean resetTicksAfterTrade;
	private boolean reevaluateTradesOnReconfiguration;
	private int pastTradeToEvaluate;

	public ContrarianStrategyConfig() {
		this.consecutiveUpticksToSell = DEFAULT_CONSECUTIVE_UPTICKS_TO_SELL;
		this.consecutiveDownticksToBuy = DEFAULT_CONSECUTIVE_DOWNTICKS_TO_BUY;
		this.tradeAmountInBaseCurrency = DEFAULT_TRADE_AMOUNT;
		this.resetTicksAfterTrade = DEFAULT_RESET_TICKS_AFTER_TRADE;
		this.reevaluateTradesOnReconfiguration = DEFAULT_REEVALUATE_PAST_ON_RECONFIGURATION;
		this.pastTradeToEvaluate = DEFAULT_PAST_TRADES_TO_EVALUATE;
	}

	public int getConsecutiveUpticksToSell() {
		return this.consecutiveUpticksToSell;
	}

	public int getConsecutiveDownticksToBuy() {
		return this.consecutiveDownticksToBuy;
	}

	public BigDecimal getTradeAmountInBaseCurrency() {
		return this.tradeAmountInBaseCurrency;
	}

	public boolean isResetTicksAfterTrade() {
		return this.resetTicksAfterTrade;
	}

	public boolean isReevaluateTradesOnReconfiguration() {
		return this.reevaluateTradesOnReconfiguration;
	}

	public int getPastTradeToEvaluate() {
		return this.pastTradeToEvaluate;
	}

	public void setConsecutiveUpticksToSell(final int consecutiveUpticksToSell) {
		this.consecutiveUpticksToSell = consecutiveUpticksToSell;
	}

	public void setConsecutiveDownticksToBuy(final int consecutiveDownticksToBuy) {
		this.consecutiveDownticksToBuy = consecutiveDownticksToBuy;
	}

	public void setTradeAmountInBaseCurrency(final BigDecimal tradeAmountInBaseCurrency) {
		this.tradeAmountInBaseCurrency = tradeAmountInBaseCurrency;
	}

	public void setResetTicksAfterTrade(final boolean resetTicksAfterTrade) {
		this.resetTicksAfterTrade = resetTicksAfterTrade;
	}

	public void setReevaluateTradesOnReconfiguration(final boolean reevaluateTradesOnReconfiguration) {
		this.reevaluateTradesOnReconfiguration = reevaluateTradesOnReconfiguration;
	}

	public void setPastTradeToEvaluate(final int pastTradeToEvaluate) {
		this.pastTradeToEvaluate = pastTradeToEvaluate;
	}

	@Override
	public String toString() {
		return "ContrarianStrategyConfig(consecutiveUpticksToSell=" + this.getConsecutiveUpticksToSell() + ", consecutiveDownticksToBuy=" + this.getConsecutiveDownticksToBuy() + ", tradeAmountInBaseCurrency=" + this.getTradeAmountInBaseCurrency() + ", resetTicksAfterTrade=" + this.isResetTicksAfterTrade() + ", reevaluateTradesOnReconfiguration=" + this.isReevaluateTradesOnReconfiguration() + ", pastTradeToEvaluate=" + this.getPastTradeToEvaluate() + ")";
	}
}
